// Code generated by entify, DO NOT EDIT.

package {{.Package}}


import (
	"context"
	"fmt"
    {{- range .Entity.Imports}}
    "{{.}}"
    {{- end}}

	"entgo.io/ent/dialect/sql"
	"{{.Module}}/entify/entity/predicate"
	"{{.Module}}/entify/entity/{{.Entity.PackageName}}"
)

func new{{.Entity.StructName}}Mutation(client *{{.Entity.StructName}}Client, op Op, opts ...{{.Entity.StructName}}Option) *{{.Entity.StructName}}Mutation {
	m := &{{.Entity.StructName}}Mutation{
		op: op,
		previous: &{{.Entity.StructName}}{
			client: client,
		},
		client:    client,
		fieldsMut: make(map[string]struct{}, {{.Entity.FieldsCount}}),
	}

	for _, opt := range opts {
		opt(m)
	}

	return m
}

type {{.Entity.StructName}}Mutation struct {
	client     *{{.Entity.StructName}}Client
	op         Op
	fieldsMut  map[string]struct{}
	previous   *{{.Entity.StructName}}
	predicates []predicate.{{.Entity.StructName}}

    {{- range .Entity.Fields}}
	{{.VariableName}} *{{.Type}}
    {{- end}}
}


{{- range .Entity.Fields}}
func ({{$.Entity.ReceiverVarName}}m *{{$.Entity.StructName}}Mutation) Set{{.PropertyName}}({{.VariableName}} {{.Type}}) *{{$.Entity.StructName}}Mutation {
	{{$.Entity.ReceiverVarName}}m.{{.VariableName}} = &{{.VariableName}}

	{{$.Entity.ReceiverVarName}}m.fieldsMut[{{$.Entity.PackageName}}.Field{{.PropertyName}}] = struct{}{}

	return {{$.Entity.ReceiverVarName}}m
}

{{if .Nullable}}
func ({{$.Entity.ReceiverVarName}}m *{{$.Entity.StructName}}Mutation) Clear{{.PropertyName}}() *{{$.Entity.StructName}}Mutation {
	{{$.Entity.ReceiverVarName}}m.{{.VariableName}} = nil

	{{$.Entity.ReceiverVarName}}m.fieldsMut[{{$.Entity.PackageName}}.Field{{.PropertyName}}] = struct{}{}

	return {{$.Entity.ReceiverVarName}}m
}
{{end}}

{{- end}}


func ({{.Entity.ReceiverVarName}}m *{{.Entity.StructName}}Mutation) Where(ps ...predicate.{{.Entity.StructName}}) *{{.Entity.StructName}}Mutation {
	{{.Entity.ReceiverVarName}}m.predicates = append({{.Entity.ReceiverVarName}}m.predicates, ps...)

	return {{.Entity.ReceiverVarName}}m
}

func ({{.Entity.ReceiverVarName}}m *{{.Entity.StructName}}Mutation) getColumnsAndValuesMutated() (*{{.Entity.StructName}}, []string, []interface{}) {
	{{.Entity.ReceiverVarName}} := {{.Entity.ReceiverVarName}}m.previous

	columns := []string{}
	values := []interface{}{}

    {{- range .Entity.Fields}}

	if _, ok := {{$.Entity.ReceiverVarName}}m.fieldsMut[{{$.Entity.PackageName}}.Field{{.PropertyName}}]; ok {
		columns = append(columns, {{$.Entity.PackageName}}.Field{{.PropertyName}})
		values = append(values, {{$.Entity.ReceiverVarName}}m.{{.VariableName}})
		if {{$.Entity.ReceiverVarName}}m.{{.VariableName}} != nil {
			{{$.Entity.ReceiverVarName}}.{{.VariableName}} = *{{$.Entity.ReceiverVarName}}m.{{.VariableName}}
		} else {
			{{$.Entity.ReceiverVarName}}.{{.VariableName}} = {{.DefaultValue}}
		}
	}

    {{- end}}

	return {{.Entity.ReceiverVarName}}, columns, values
}


// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
/*
func ({{.Entity.ReceiverVarName}}m *{{.Entity.StructName}}Mutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case {{.Entity.ReceiverVarName}}m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := {{.Entity.ReceiverVarName}}m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case {{.Entity.ReceiverVarName}}m.op.Is(OpUpdate | OpDelete):
		return {{.Entity.ReceiverVarName}}m.client.Query().Where({{.Entity.ReceiverVarName}}m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", {{.Entity.ReceiverVarName}}m.op)
	}
}
*/
func ({{.Entity.ReceiverVarName}}m *{{.Entity.StructName}}Mutation) create(ctx context.Context) (*{{.Entity.StructName}}, error) {
	{{.Entity.ReceiverVarName}}, columns, values := {{.Entity.ReceiverVarName}}m.getColumnsAndValuesMutated()

	query, args := sql.Insert({{.Entity.ReceiverVarName}}m.client.table).Columns(columns...).Values(values...).Query()

	{{if .Entity.PrimaryKeyAutoIncr }}result{{else}}_{{end}}, err := {{.Entity.ReceiverVarName}}m.client.db.ExecContext(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("insert failed: %w", err)
	}

    {{- if .Entity.PrimaryKeyAutoIncr }}
    {{ $pk := (index .Entity.PrimaryKeys 0).VariableName }}
    {{ $pk }}, err := result.LastInsertId()
    if err != nil {
        return nil, fmt.Errorf("insert failed: %w", err)
    }

    {{.Entity.ReceiverVarName}}.{{ $pk }} = {{ $pk }}
    {{- end}}

	return {{.Entity.ReceiverVarName}}, nil
}

func ({{.Entity.ReceiverVarName}}m *{{.Entity.StructName}}Mutation) updateOne(ctx context.Context) (*{{.Entity.StructName}}, error) {
	{{.Entity.ReceiverVarName}}, columns, values := {{.Entity.ReceiverVarName}}m.getColumnsAndValuesMutated()

	updateBuilder := sql.Update({{.Entity.ReceiverVarName}}m.client.table)

	for i, column := range columns {
		v := values[i]
		if v == nil {
			updateBuilder = updateBuilder.SetNull(column)
		} else {
			updateBuilder = updateBuilder.Set(column, v)
		}
	}

	query, args := updateBuilder.
        {{- range .Entity.PrimaryKeys}}
        Where(sql.EQ({{$.Entity.PackageName}}.Field{{.PropertyName}}, {{$.Entity.ReceiverVarName}}m.previous.{{.VariableName}})).
        {{- end}}
        Query()

	if _, err := {{.Entity.ReceiverVarName}}m.client.db.ExecContext(ctx, query, args...); err != nil {
		return nil, fmt.Errorf("update failed: %w", err)
	}

	return {{.Entity.ReceiverVarName}}, nil
}

func ({{.Entity.ReceiverVarName}}m *{{.Entity.StructName}}Mutation) update(ctx context.Context) (*{{.Entity.StructName}}, error) {
    return nil, fmt.Errorf("not yet implemented")
	/*
    {{.Entity.ReceiverVarName}}, columns, values := {{.Entity.ReceiverVarName}}m.getColumnsAndValuesMutated()

	updateBuilder := sql.Update({{.Entity.ReceiverVarName}}m.client.table)

	for i, column := range columns {
		v := values[i]
		if v == nil {
			updateBuilder = updateBuilder.SetNull(column)
		} else {
			updateBuilder = updateBuilder.Set(column, v)
		}
	}

// START WIP
    ids, err := {{.Entity.ReceiverVarName}}m.IDs(ctx)
	if err != nil {
		return nil, fmt.Errorf("select ids failed: %w", err)
	}

	updateBuilder.Where(sql.In({{.Entity.PackageName}}.FieldID, {{.Entity.PackageName}}.IDs(ids)))
// END WIP

	query, args := updateBuilder.Query()

	if _, err := {{.Entity.ReceiverVarName}}m.client.db.ExecContext(ctx, query, args...); err != nil {
		return nil, fmt.Errorf("update failed: %w", err)
	}

	return {{.Entity.ReceiverVarName}}, nil
    */
}

func ({{.Entity.ReceiverVarName}}m *{{.Entity.StructName}}Mutation) deleteOne(ctx context.Context) error {
    query, args := sql.Delete({{.Entity.ReceiverVarName}}m.client.table).
        {{- range .Entity.PrimaryKeys}}
        Where(sql.EQ({{$.Entity.PackageName}}.Field{{.PropertyName}}, {{$.Entity.ReceiverVarName}}m.previous.{{.VariableName}})).
        {{- end}}
        Query()

	if _, err := {{.Entity.ReceiverVarName}}m.client.db.ExecContext(ctx, query, args...); err != nil {
		return fmt.Errorf("delete failed: %w", err)
	}

	return nil
}

func ({{.Entity.ReceiverVarName}}m *{{.Entity.StructName}}Mutation) delete(ctx context.Context) error {
    return fmt.Errorf("not yet implemented")
/*
	query, args := sql.Delete({{.Entity.ReceiverVarName}}m.client.table).Where(sql.EQ({{.Entity.PackageName}}.FieldID, {{.Entity.ReceiverVarName}}m.previous.id)).Query()

	//@TODO: use {{.Entity.ReceiverVarName}}m.predicates for where

	if _, err := {{.Entity.ReceiverVarName}}m.client.db.ExecContext(ctx, query, args...); err != nil {
		return fmt.Errorf("delete failed: %w", err)
	}

	return nil
*/
}

func ({{.Entity.ReceiverVarName}}m *{{.Entity.StructName}}Mutation) Save(ctx context.Context) (*{{.Entity.StructName}}, error) {
	switch {{.Entity.ReceiverVarName}}m.op {
	case OpCreate:
		return {{.Entity.ReceiverVarName}}m.create(ctx)
	case OpUpdateOne:
		return {{.Entity.ReceiverVarName}}m.updateOne(ctx)
	case OpUpdate:
		return {{.Entity.ReceiverVarName}}m.update(ctx)
	}

	return nil, ErrBadOperation
}

func ({{.Entity.ReceiverVarName}}m *{{.Entity.StructName}}Mutation) Exec(ctx context.Context) error {
	switch {{.Entity.ReceiverVarName}}m.op {
	case OpDeleteOne:
		return {{.Entity.ReceiverVarName}}m.deleteOne(ctx)
	case OpDelete:
		return {{.Entity.ReceiverVarName}}m.delete(ctx)
	}

	return ErrBadOperation
}

type {{.Entity.StructName}}Option func(m *{{.Entity.StructName}}Mutation)

func with{{.Entity.StructName}}({{.Entity.VariableName}} *{{.Entity.StructName}}) {{.Entity.StructName}}Option {
	return func(m *{{.Entity.StructName}}Mutation) {
		m.previous = {{.Entity.VariableName}}
	}
}

func with{{.Entity.StructName}}ID(
{{- range .Entity.PrimaryKeys}}
{{.VariableName}} {{.Type}},
{{- end}}
) {{.Entity.StructName}}Option {
	return func(m *{{.Entity.StructName}}Mutation) {
		m.previous = &{{.Entity.StructName}}{
			client: m.client,
			{{- range .Entity.PrimaryKeys}}
            {{.VariableName}}: {{.VariableName}},
            {{- end}}
		}
	}
}
