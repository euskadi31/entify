// Code generated by entify, DO NOT EDIT.

package {{.Package}}


import (
	"context"
	"fmt"
)

type {{.Entity.StructName}}Query struct {
	client *{{.Entity.StructName}}Client
}

func ({{.Entity.ReceiverVarName}}q *{{.Entity.StructName}}Query) FindOne(ctx context.Context, query string, args ...interface{}) (*{{.Entity.StructName}}, error) {
	rows, err := {{.Entity.ReceiverVarName}}q.client.db.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("update failed: %w", err)
	}

	defer rows.Close()

	columns, err := rows.Columns()
	if err != nil {
		return nil, fmt.Errorf("get columns failed: %w", err)
	}

	{{.Entity.ReceiverVarName}} := &{{.Entity.StructName}}{
		client: {{.Entity.ReceiverVarName}}q.client,
	}

	for rows.Next() {
		values, err := {{.Entity.ReceiverVarName}}.scanValues(columns)
		if err != nil {
			return nil, fmt.Errorf("{{.Entity.StructName}} scan values from columns failed: %w", err)
		}

		if err := rows.Scan(values...); err != nil {
			return nil, fmt.Errorf("scan row to values failed: %w", err)
		}

		if err := {{.Entity.ReceiverVarName}}.assignValues(columns, values); err != nil {
			return nil, fmt.Errorf("{{.Entity.StructName}} assign values failed: %w", err)
		}

		break
	}

	return {{.Entity.ReceiverVarName}}, rows.Err()
}

func ({{.Entity.ReceiverVarName}}q *{{.Entity.StructName}}Query) FindAll(ctx context.Context, query string, args ...interface{}) ([]*{{.Entity.StructName}}, error) {
	rows, err := {{.Entity.ReceiverVarName}}q.client.db.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("update failed: %w", err)
	}

	defer rows.Close()

	columns, err := rows.Columns()
	if err != nil {
		return nil, fmt.Errorf("get columns failed: %w", err)
	}

	items := []*{{.Entity.StructName}}{}

	for rows.Next() {
		{{.Entity.ReceiverVarName}} := &{{.Entity.StructName}}{
			client: {{.Entity.ReceiverVarName}}q.client,
		}

		values, err := {{.Entity.ReceiverVarName}}.scanValues(columns)
		if err != nil {
			return nil, fmt.Errorf("{{.Entity.StructName}} scan values from columns failed: %w", err)
		}

		if err := rows.Scan(values...); err != nil {
			return nil, fmt.Errorf("scan row to values failed: %w", err)
		}

		if err := {{.Entity.ReceiverVarName}}.assignValues(columns, values); err != nil {
			return nil, fmt.Errorf("{{.Entity.StructName}} assign values failed: %w", err)
		}

		items = append(items, {{.Entity.ReceiverVarName}})
	}

	return items, rows.Err()
}
